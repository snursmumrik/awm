/*
* generated by Xtext
*/
grammar InternalAWM;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package ac.soton.awm.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.awm.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import ac.soton.awm.services.AWMGrammarAccess;

}

@parser::members {
 
 	private AWMGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AWMGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcess
entryRuleProcess 
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessAccess().getGroup()); }
(rule__Process__Group__0)
{ after(grammarAccess.getProcessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getGroup()); }
(rule__Instruction__Group__0)
{ after(grammarAccess.getInstructionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoad
entryRuleLoad 
:
{ before(grammarAccess.getLoadRule()); }
	 ruleLoad
{ after(grammarAccess.getLoadRule()); } 
	 EOF 
;

// Rule Load
ruleLoad
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoadAccess().getGroup()); }
(rule__Load__Group__0)
{ after(grammarAccess.getLoadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStore
entryRuleStore 
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStoreAccess().getGroup()); }
(rule__Store__Group__0)
{ after(grammarAccess.getStoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDLoad
entryRuleDLoad 
:
{ before(grammarAccess.getDLoadRule()); }
	 ruleDLoad
{ after(grammarAccess.getDLoadRule()); } 
	 EOF 
;

// Rule DLoad
ruleDLoad
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDLoadAccess().getGroup()); }
(rule__DLoad__Group__0)
{ after(grammarAccess.getDLoadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDStore
entryRuleDStore 
:
{ before(grammarAccess.getDStoreRule()); }
	 ruleDStore
{ after(grammarAccess.getDStoreRule()); } 
	 EOF 
;

// Rule DStore
ruleDStore
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDStoreAccess().getGroup()); }
(rule__DStore__Group__0)
{ after(grammarAccess.getDStoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWait
entryRuleWait 
:
{ before(grammarAccess.getWaitRule()); }
	 ruleWait
{ after(grammarAccess.getWaitRule()); } 
	 EOF 
;

// Rule Wait
ruleWait
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWaitAccess().getGroup()); }
(rule__Wait__Group__0)
{ after(grammarAccess.getWaitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFence
entryRuleFence 
:
{ before(grammarAccess.getFenceRule()); }
	 ruleFence
{ after(grammarAccess.getFenceRule()); } 
	 EOF 
;

// Rule Fence
ruleFence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFenceAccess().getGroup()); }
(rule__Fence__Group__0)
{ after(grammarAccess.getFenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegister
entryRuleRegister 
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegisterAccess().getNameAssignment()); }
(rule__Register__NameAssignment)
{ after(grammarAccess.getRegisterAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutcome
entryRuleOutcome 
:
{ before(grammarAccess.getOutcomeRule()); }
	 ruleOutcome
{ after(grammarAccess.getOutcomeRule()); } 
	 EOF 
;

// Rule Outcome
ruleOutcome
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutcomeAccess().getGroup()); }
(rule__Outcome__Group__0)
{ after(grammarAccess.getOutcomeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getImplicationParserRuleCall()); }
	ruleImplication
{ after(grammarAccess.getStateAccess().getImplicationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplication
entryRuleImplication 
:
{ before(grammarAccess.getImplicationRule()); }
	 ruleImplication
{ after(grammarAccess.getImplicationRule()); } 
	 EOF 
;

// Rule Implication
ruleImplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicationAccess().getGroup()); }
(rule__Implication__Group__0)
{ after(grammarAccess.getImplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDisjunction
entryRuleDisjunction 
:
{ before(grammarAccess.getDisjunctionRule()); }
	 ruleDisjunction
{ after(grammarAccess.getDisjunctionRule()); } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup()); }
(rule__Disjunction__Group__0)
{ after(grammarAccess.getDisjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegation
entryRuleNegation 
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationAccess().getAlternatives()); }
(rule__Negation__Alternatives)
{ after(grammarAccess.getNegationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegated
entryRuleNegated 
:
{ before(grammarAccess.getNegatedRule()); }
	 ruleNegated
{ after(grammarAccess.getNegatedRule()); } 
	 EOF 
;

// Rule Negated
ruleNegated
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegatedAccess().getGroup()); }
(rule__Negated__Group__0)
{ after(grammarAccess.getNegatedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegState
entryRuleRegState 
:
{ before(grammarAccess.getRegStateRule()); }
	 ruleRegState
{ after(grammarAccess.getRegStateRule()); } 
	 EOF 
;

// Rule RegState
ruleRegState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegStateAccess().getGroup()); }
(rule__RegState__Group__0)
{ after(grammarAccess.getRegStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRQN
entryRuleRQN 
:
{ before(grammarAccess.getRQNRule()); }
	 ruleRQN
{ after(grammarAccess.getRQNRule()); } 
	 EOF 
;

// Rule RQN
ruleRQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRQNAccess().getGroup()); }
(rule__RQN__Group__0)
{ after(grammarAccess.getRQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Instruction__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getLoadParserRuleCall_0_0()); }
	ruleLoad
{ after(grammarAccess.getInstructionAccess().getLoadParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getStoreParserRuleCall_0_1()); }
	ruleStore
{ after(grammarAccess.getInstructionAccess().getStoreParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getDLoadParserRuleCall_0_2()); }
	ruleDLoad
{ after(grammarAccess.getInstructionAccess().getDLoadParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getDStoreParserRuleCall_0_3()); }
	ruleDStore
{ after(grammarAccess.getInstructionAccess().getDStoreParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getWaitParserRuleCall_0_4()); }
	ruleWait
{ after(grammarAccess.getInstructionAccess().getWaitParserRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getFenceParserRuleCall_0_5()); }
	ruleFence
{ after(grammarAccess.getInstructionAccess().getFenceParserRuleCall_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getGroup_0()); }
(rule__Negation__Group_0__0)
{ after(grammarAccess.getNegationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNegationAccess().getPrimaryParserRuleCall_1()); }
	rulePrimary
{ after(grammarAccess.getNegationAccess().getPrimaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
(rule__Primary__Group_0__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getRegStateParserRuleCall_1()); }
	ruleRegState
{ after(grammarAccess.getPrimaryAccess().getRegStateParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
(rule__Model__ProcessesAssignment_0)*
{ after(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOutcomesAssignment_1()); }
(rule__Model__OutcomesAssignment_1)*
{ after(grammarAccess.getModelAccess().getOutcomesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Process__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getNameAssignment_0()); }
(rule__Process__NameAssignment_0)
{ after(grammarAccess.getProcessAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getProcessAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getInstructionsAssignment_2()); }
(rule__Process__InstructionsAssignment_2)*
{ after(grammarAccess.getProcessAccess().getInstructionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Instruction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group__0__Impl
	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives_0()); }
(rule__Instruction__Alternatives_0)
{ after(grammarAccess.getInstructionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instruction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getCOMMENTTerminalRuleCall_1()); }
(	RULE_COMMENT)?
{ after(grammarAccess.getInstructionAccess().getCOMMENTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Load__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Load__Group__0__Impl
	rule__Load__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadAccess().getLdKeyword_0()); }

	'ld' 

{ after(grammarAccess.getLoadAccess().getLdKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Load__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Load__Group__1__Impl
	rule__Load__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadAccess().getRegisterAssignment_1()); }
(rule__Load__RegisterAssignment_1)
{ after(grammarAccess.getLoadAccess().getRegisterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Load__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Load__Group__2__Impl
	rule__Load__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getLoadAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Load__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Load__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadAccess().getAddressAssignment_3()); }
(rule__Load__AddressAssignment_3)
{ after(grammarAccess.getLoadAccess().getAddressAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Store__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getStKeyword_0()); }

	'st' 

{ after(grammarAccess.getStoreAccess().getStKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getValueAssignment_1()); }
(rule__Store__ValueAssignment_1)
{ after(grammarAccess.getStoreAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__2__Impl
	rule__Store__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getStoreAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getAddressAssignment_3()); }
(rule__Store__AddressAssignment_3)
{ after(grammarAccess.getStoreAccess().getAddressAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DLoad__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DLoad__Group__0__Impl
	rule__DLoad__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DLoad__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDLoadAccess().getD_ldKeyword_0()); }

	'd_ld' 

{ after(grammarAccess.getDLoadAccess().getD_ldKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DLoad__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DLoad__Group__1__Impl
	rule__DLoad__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DLoad__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDLoadAccess().getRegisterAssignment_1()); }
(rule__DLoad__RegisterAssignment_1)
{ after(grammarAccess.getDLoadAccess().getRegisterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DLoad__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DLoad__Group__2__Impl
	rule__DLoad__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DLoad__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDLoadAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getDLoadAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DLoad__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DLoad__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DLoad__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDLoadAccess().getAddressAssignment_3()); }
(rule__DLoad__AddressAssignment_3)
{ after(grammarAccess.getDLoadAccess().getAddressAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DStore__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DStore__Group__0__Impl
	rule__DStore__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DStore__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDStoreAccess().getD_stKeyword_0()); }

	'd_st' 

{ after(grammarAccess.getDStoreAccess().getD_stKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DStore__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DStore__Group__1__Impl
	rule__DStore__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DStore__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDStoreAccess().getValueAssignment_1()); }
(rule__DStore__ValueAssignment_1)
{ after(grammarAccess.getDStoreAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DStore__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DStore__Group__2__Impl
	rule__DStore__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DStore__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDStoreAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getDStoreAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DStore__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DStore__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DStore__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDStoreAccess().getAddressAssignment_3()); }
(rule__DStore__AddressAssignment_3)
{ after(grammarAccess.getDStoreAccess().getAddressAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Wait__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wait__Group__0__Impl
	rule__Wait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getWaitKeyword_0()); }

	'wait' 

{ after(grammarAccess.getWaitAccess().getWaitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wait__Group__1__Impl
	rule__Wait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getRegisterAssignment_1()); }
(rule__Wait__RegisterAssignment_1)
{ after(grammarAccess.getWaitAccess().getRegisterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wait__Group__2__Impl
	rule__Wait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getWaitAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wait__Group__3__Impl
	rule__Wait__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getAddressAssignment_3()); }
(rule__Wait__AddressAssignment_3)
{ after(grammarAccess.getWaitAccess().getAddressAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wait__Group__4__Impl
	rule__Wait__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getWaitAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wait__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getValueAssignment_5()); }
(rule__Wait__ValueAssignment_5)
{ after(grammarAccess.getWaitAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Fence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fence__Group__0__Impl
	rule__Fence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFenceAccess().getFenceAction_0()); }
(

)
{ after(grammarAccess.getFenceAccess().getFenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFenceAccess().getFenceKeyword_1()); }

	'fence' 

{ after(grammarAccess.getFenceAccess().getFenceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Outcome__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outcome__Group__0__Impl
	rule__Outcome__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Outcome__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutcomeAccess().getOutcomeKeyword_0()); }

	'outcome:' 

{ after(grammarAccess.getOutcomeAccess().getOutcomeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Outcome__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outcome__Group__1__Impl
	rule__Outcome__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Outcome__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutcomeAccess().getStateParserRuleCall_1()); }
	ruleState
{ after(grammarAccess.getOutcomeAccess().getStateParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Outcome__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outcome__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Outcome__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutcomeAccess().getCOMMENTTerminalRuleCall_2()); }
(	RULE_COMMENT)?
{ after(grammarAccess.getOutcomeAccess().getCOMMENTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Implication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__0__Impl
	rule__Implication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
	ruleDisjunction
{ after(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getGroup_1()); }
(rule__Implication__Group_1__0)?
{ after(grammarAccess.getImplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Implication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__0__Impl
	rule__Implication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getBinaryLeftAction_1_0()); }
(

)
{ after(grammarAccess.getImplicationAccess().getBinaryLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__1__Impl
	rule__Implication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getOpAssignment_1_1()); }
(rule__Implication__OpAssignment_1_1)
{ after(grammarAccess.getImplicationAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
(rule__Implication__RightAssignment_1_2)
{ after(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Disjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__0__Impl
	rule__Disjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
{ after(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup_1()); }
(rule__Disjunction__Group_1__0)?
{ after(grammarAccess.getDisjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Disjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__0__Impl
	rule__Disjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getBinaryLeftAction_1_0()); }
(

)
{ after(grammarAccess.getDisjunctionAccess().getBinaryLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__1__Impl
	rule__Disjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOpAssignment_1_1()); }
(rule__Disjunction__OpAssignment_1_1)
{ after(grammarAccess.getDisjunctionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
(rule__Disjunction__RightAssignment_1_2)
{ after(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0()); }
	ruleNegation
{ after(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
(rule__Conjunction__Group_1__0)?
{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getBinaryLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConjunctionAccess().getBinaryLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOpAssignment_1_1()); }
(rule__Conjunction__OpAssignment_1_1)
{ after(grammarAccess.getConjunctionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
(rule__Conjunction__RightAssignment_1_2)
{ after(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Negation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group_0__0__Impl
	rule__Negation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getNOTTerminalRuleCall_0_0()); }
	RULE_NOT
{ after(grammarAccess.getNegationAccess().getNOTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1()); }
	ruleNegated
{ after(grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Negated__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negated__Group__0__Impl
	rule__Negated__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negated__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedAccess().getNotAction_0()); }
(

)
{ after(grammarAccess.getNegatedAccess().getNotAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negated__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negated__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negated__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedAccess().getNotAssignment_1()); }
(rule__Negated__NotAssignment_1)
{ after(grammarAccess.getNegatedAccess().getNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Primary__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getStateParserRuleCall_0_1()); }
	ruleState
{ after(grammarAccess.getPrimaryAccess().getStateParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RegState__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegState__Group__0__Impl
	rule__RegState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegState__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegStateAccess().getRegisterAssignment_0()); }
(rule__RegState__RegisterAssignment_0)
{ after(grammarAccess.getRegStateAccess().getRegisterAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegState__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegState__Group__1__Impl
	rule__RegState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegState__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegStateAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getRegStateAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegState__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegState__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegState__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegStateAccess().getValueAssignment_2()); }
(rule__RegState__ValueAssignment_2)
{ after(grammarAccess.getRegStateAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RQN__Group__0__Impl
	rule__RQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRQNAccess().getPROCTerminalRuleCall_0()); }
	RULE_PROC
{ after(grammarAccess.getRQNAccess().getPROCTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RQN__Group__1__Impl
	rule__RQN__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRQNAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getRQNAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RQN__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RQN__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RQN__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRQNAccess().getREGTerminalRuleCall_2()); }
	RULE_REG
{ after(grammarAccess.getRQNAccess().getREGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__ProcessesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_0_0()); }
	ruleProcess{ after(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__OutcomesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOutcomesOutcomeParserRuleCall_1_0()); }
	ruleOutcome{ after(grammarAccess.getModelAccess().getOutcomesOutcomeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getNamePROCTerminalRuleCall_0_0()); }
	RULE_PROC{ after(grammarAccess.getProcessAccess().getNamePROCTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__InstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getProcessAccess().getInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Load__RegisterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadAccess().getRegisterRegisterParserRuleCall_1_0()); }
	ruleRegister{ after(grammarAccess.getLoadAccess().getRegisterRegisterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Load__AddressAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadAccess().getAddressADDRTerminalRuleCall_3_0()); }
	RULE_ADDR{ after(grammarAccess.getLoadAccess().getAddressADDRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getStoreAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Store__AddressAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getAddressADDRTerminalRuleCall_3_0()); }
	RULE_ADDR{ after(grammarAccess.getStoreAccess().getAddressADDRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DLoad__RegisterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDLoadAccess().getRegisterRegisterParserRuleCall_1_0()); }
	ruleRegister{ after(grammarAccess.getDLoadAccess().getRegisterRegisterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DLoad__AddressAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDLoadAccess().getAddressADDRTerminalRuleCall_3_0()); }
	RULE_ADDR{ after(grammarAccess.getDLoadAccess().getAddressADDRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DStore__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDStoreAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getDStoreAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DStore__AddressAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDStoreAccess().getAddressADDRTerminalRuleCall_3_0()); }
	RULE_ADDR{ after(grammarAccess.getDStoreAccess().getAddressADDRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__RegisterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getRegisterRegisterParserRuleCall_1_0()); }
	ruleRegister{ after(grammarAccess.getWaitAccess().getRegisterRegisterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__AddressAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getAddressADDRTerminalRuleCall_3_0()); }
	RULE_ADDR{ after(grammarAccess.getWaitAccess().getAddressADDRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitAccess().getValueINTTerminalRuleCall_5_0()); }
	RULE_INT{ after(grammarAccess.getWaitAccess().getValueINTTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisterAccess().getNameREGTerminalRuleCall_0()); }
	RULE_REG{ after(grammarAccess.getRegisterAccess().getNameREGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getOpIMPLYTerminalRuleCall_1_1_0()); }
	RULE_IMPLY{ after(grammarAccess.getImplicationAccess().getOpIMPLYTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0()); }
	ruleImplication{ after(grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOpORTerminalRuleCall_1_1_0()); }
	RULE_OR{ after(grammarAccess.getDisjunctionAccess().getOpORTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
	ruleDisjunction{ after(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOpANDTerminalRuleCall_1_1_0()); }
	RULE_AND{ after(grammarAccess.getConjunctionAccess().getOpANDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
	ruleConjunction{ after(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negated__NotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedAccess().getNotPrimaryParserRuleCall_1_0()); }
	rulePrimary{ after(grammarAccess.getNegatedAccess().getNotPrimaryParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegState__RegisterAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegStateAccess().getRegisterRegisterCrossReference_0_0()); }
(
{ before(grammarAccess.getRegStateAccess().getRegisterRegisterRQNParserRuleCall_0_0_1()); }
	ruleRQN{ after(grammarAccess.getRegStateAccess().getRegisterRegisterRQNParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getRegStateAccess().getRegisterRegisterCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegState__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegStateAccess().getValueINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getRegStateAccess().getValueINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_IMPLY : '=>';

RULE_OR : 'or';

RULE_AND : 'and';

RULE_NOT : 'not';

RULE_PROC : ('P'|'p') RULE_INT;

RULE_REG : ('R'|'r') RULE_INT;

RULE_ADDR : ('A'|'a') RULE_INT;

RULE_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


