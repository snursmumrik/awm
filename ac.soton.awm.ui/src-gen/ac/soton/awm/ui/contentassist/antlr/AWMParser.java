/*
* generated by Xtext
*/
package ac.soton.awm.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import ac.soton.awm.services.AWMGrammarAccess;

public class AWMParser extends AbstractContentAssistParser {
	
	@Inject
	private AWMGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected ac.soton.awm.ui.contentassist.antlr.internal.InternalAWMParser createParser() {
		ac.soton.awm.ui.contentassist.antlr.internal.InternalAWMParser result = new ac.soton.awm.ui.contentassist.antlr.internal.InternalAWMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives_0(), "rule__Instruction__Alternatives_0");
					put(grammarAccess.getNegationAccess().getAlternatives(), "rule__Negation__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
					put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
					put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
					put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
					put(grammarAccess.getDLoadAccess().getGroup(), "rule__DLoad__Group__0");
					put(grammarAccess.getDStoreAccess().getGroup(), "rule__DStore__Group__0");
					put(grammarAccess.getWaitAccess().getGroup(), "rule__Wait__Group__0");
					put(grammarAccess.getFenceAccess().getGroup(), "rule__Fence__Group__0");
					put(grammarAccess.getOutcomeAccess().getGroup(), "rule__Outcome__Group__0");
					put(grammarAccess.getImplicationAccess().getGroup(), "rule__Implication__Group__0");
					put(grammarAccess.getImplicationAccess().getGroup_1(), "rule__Implication__Group_1__0");
					put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup_1(), "rule__Disjunction__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getNegationAccess().getGroup_0(), "rule__Negation__Group_0__0");
					put(grammarAccess.getNegatedAccess().getGroup(), "rule__Negated__Group__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getRegStateAccess().getGroup(), "rule__RegState__Group__0");
					put(grammarAccess.getRQNAccess().getGroup(), "rule__RQN__Group__0");
					put(grammarAccess.getModelAccess().getProcessesAssignment_0(), "rule__Model__ProcessesAssignment_0");
					put(grammarAccess.getModelAccess().getOutcomesAssignment_1(), "rule__Model__OutcomesAssignment_1");
					put(grammarAccess.getProcessAccess().getNameAssignment_0(), "rule__Process__NameAssignment_0");
					put(grammarAccess.getProcessAccess().getInstructionsAssignment_2(), "rule__Process__InstructionsAssignment_2");
					put(grammarAccess.getLoadAccess().getRegisterAssignment_1(), "rule__Load__RegisterAssignment_1");
					put(grammarAccess.getLoadAccess().getAddressAssignment_3(), "rule__Load__AddressAssignment_3");
					put(grammarAccess.getStoreAccess().getValueAssignment_1(), "rule__Store__ValueAssignment_1");
					put(grammarAccess.getStoreAccess().getAddressAssignment_3(), "rule__Store__AddressAssignment_3");
					put(grammarAccess.getDLoadAccess().getRegisterAssignment_1(), "rule__DLoad__RegisterAssignment_1");
					put(grammarAccess.getDLoadAccess().getAddressAssignment_3(), "rule__DLoad__AddressAssignment_3");
					put(grammarAccess.getDStoreAccess().getValueAssignment_1(), "rule__DStore__ValueAssignment_1");
					put(grammarAccess.getDStoreAccess().getAddressAssignment_3(), "rule__DStore__AddressAssignment_3");
					put(grammarAccess.getWaitAccess().getRegisterAssignment_1(), "rule__Wait__RegisterAssignment_1");
					put(grammarAccess.getWaitAccess().getAddressAssignment_3(), "rule__Wait__AddressAssignment_3");
					put(grammarAccess.getWaitAccess().getValueAssignment_5(), "rule__Wait__ValueAssignment_5");
					put(grammarAccess.getRegisterAccess().getNameAssignment(), "rule__Register__NameAssignment");
					put(grammarAccess.getImplicationAccess().getOpAssignment_1_1(), "rule__Implication__OpAssignment_1_1");
					put(grammarAccess.getImplicationAccess().getRightAssignment_1_2(), "rule__Implication__RightAssignment_1_2");
					put(grammarAccess.getDisjunctionAccess().getOpAssignment_1_1(), "rule__Disjunction__OpAssignment_1_1");
					put(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2(), "rule__Disjunction__RightAssignment_1_2");
					put(grammarAccess.getConjunctionAccess().getOpAssignment_1_1(), "rule__Conjunction__OpAssignment_1_1");
					put(grammarAccess.getConjunctionAccess().getRightAssignment_1_2(), "rule__Conjunction__RightAssignment_1_2");
					put(grammarAccess.getNegatedAccess().getNotAssignment_1(), "rule__Negated__NotAssignment_1");
					put(grammarAccess.getRegStateAccess().getRegisterAssignment_0(), "rule__RegState__RegisterAssignment_0");
					put(grammarAccess.getRegStateAccess().getValueAssignment_2(), "rule__RegState__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			ac.soton.awm.ui.contentassist.antlr.internal.InternalAWMParser typedParser = (ac.soton.awm.ui.contentassist.antlr.internal.InternalAWMParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AWMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AWMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
