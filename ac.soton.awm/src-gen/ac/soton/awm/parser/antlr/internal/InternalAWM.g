/*
* generated by Xtext
*/
grammar InternalAWM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ac.soton.awm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.awm.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.awm.services.AWMGrammarAccess;

}

@parser::members {

 	private AWMGrammarAccess grammarAccess;
 	
    public InternalAWMParser(TokenStream input, AWMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AWMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_0_0()); 
	    }
		lv_processes_0_0=ruleProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_0_0, 
        		"Process");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getOutcomesOutcomeParserRuleCall_1_0()); 
	    }
		lv_outcomes_1_0=ruleOutcome		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"outcomes",
        		lv_outcomes_1_0, 
        		"Outcome");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_PROC
		{
			newLeafNode(lv_name_0_0, grammarAccess.getProcessAccess().getNamePROCTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"PROC");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcessAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getInstructionsInstructionParserRuleCall_2_0()); 
	    }
		lv_instructions_2_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_2_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLoadParserRuleCall_0_0()); 
    }
    this_Load_0=ruleLoad
    { 
        $current = $this_Load_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getStoreParserRuleCall_0_1()); 
    }
    this_Store_1=ruleStore
    { 
        $current = $this_Store_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDLoadParserRuleCall_0_2()); 
    }
    this_DLoad_2=ruleDLoad
    { 
        $current = $this_DLoad_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDStoreParserRuleCall_0_3()); 
    }
    this_DStore_3=ruleDStore
    { 
        $current = $this_DStore_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getWaitParserRuleCall_0_4()); 
    }
    this_Wait_4=ruleWait
    { 
        $current = $this_Wait_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getFenceParserRuleCall_0_5()); 
    }
    this_Fence_5=ruleFence
    { 
        $current = $this_Fence_5.current; 
        afterParserOrEnumRuleCall();
    }
)(this_COMMENT_6=RULE_COMMENT
    { 
    newLeafNode(this_COMMENT_6, grammarAccess.getInstructionAccess().getCOMMENTTerminalRuleCall_1()); 
    }
)?)
;





// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	 iv_ruleLoad=ruleLoad 
	 { $current=$iv_ruleLoad.current; } 
	 EOF 
;

// Rule Load
ruleLoad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ld' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getLdKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getRegisterRegisterParserRuleCall_1_0()); 
	    }
		lv_register_1_0=ruleRegister		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"register",
        		lv_register_1_0, 
        		"Register");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoadAccess().getCommaKeyword_2());
    }
(
(
		lv_address_3_0=RULE_ADDR
		{
			newLeafNode(lv_address_3_0, grammarAccess.getLoadAccess().getAddressADDRTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"address",
        		lv_address_3_0, 
        		"ADDR");
	    }

)
))
;





// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	 iv_ruleStore=ruleStore 
	 { $current=$iv_ruleStore.current; } 
	 EOF 
;

// Rule Store
ruleStore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='st' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStoreAccess().getStKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStoreAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStoreAccess().getCommaKeyword_2());
    }
(
(
		lv_address_3_0=RULE_ADDR
		{
			newLeafNode(lv_address_3_0, grammarAccess.getStoreAccess().getAddressADDRTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"address",
        		lv_address_3_0, 
        		"ADDR");
	    }

)
))
;





// Entry rule entryRuleDLoad
entryRuleDLoad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDLoadRule()); }
	 iv_ruleDLoad=ruleDLoad 
	 { $current=$iv_ruleDLoad.current; } 
	 EOF 
;

// Rule DLoad
ruleDLoad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='d_ld' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDLoadAccess().getD_ldKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDLoadAccess().getRegisterRegisterParserRuleCall_1_0()); 
	    }
		lv_register_1_0=ruleRegister		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDLoadRule());
	        }
       		set(
       			$current, 
       			"register",
        		lv_register_1_0, 
        		"Register");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDLoadAccess().getCommaKeyword_2());
    }
(
(
		lv_address_3_0=RULE_ADDR
		{
			newLeafNode(lv_address_3_0, grammarAccess.getDLoadAccess().getAddressADDRTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDLoadRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"address",
        		lv_address_3_0, 
        		"ADDR");
	    }

)
))
;





// Entry rule entryRuleDStore
entryRuleDStore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDStoreRule()); }
	 iv_ruleDStore=ruleDStore 
	 { $current=$iv_ruleDStore.current; } 
	 EOF 
;

// Rule DStore
ruleDStore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='d_st' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDStoreAccess().getD_stKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getDStoreAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDStoreAccess().getCommaKeyword_2());
    }
(
(
		lv_address_3_0=RULE_ADDR
		{
			newLeafNode(lv_address_3_0, grammarAccess.getDStoreAccess().getAddressADDRTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"address",
        		lv_address_3_0, 
        		"ADDR");
	    }

)
))
;





// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	 iv_ruleWait=ruleWait 
	 { $current=$iv_ruleWait.current; } 
	 EOF 
;

// Rule Wait
ruleWait returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wait' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWaitAccess().getWaitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWaitAccess().getRegisterRegisterParserRuleCall_1_0()); 
	    }
		lv_register_1_0=ruleRegister		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaitRule());
	        }
       		set(
       			$current, 
       			"register",
        		lv_register_1_0, 
        		"Register");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWaitAccess().getCommaKeyword_2());
    }
(
(
		lv_address_3_0=RULE_ADDR
		{
			newLeafNode(lv_address_3_0, grammarAccess.getWaitAccess().getAddressADDRTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"address",
        		lv_address_3_0, 
        		"ADDR");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWaitAccess().getCommaKeyword_4());
    }
(
(
		lv_value_5_0=RULE_INT
		{
			newLeafNode(lv_value_5_0, grammarAccess.getWaitAccess().getValueINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleFence
entryRuleFence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFenceRule()); }
	 iv_ruleFence=ruleFence 
	 { $current=$iv_ruleFence.current; } 
	 EOF 
;

// Rule Fence
ruleFence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFenceAccess().getFenceAction_0(),
            $current);
    }
)	otherlv_1='fence' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFenceAccess().getFenceKeyword_1());
    }
)
;





// Entry rule entryRuleRegister
entryRuleRegister returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegisterRule()); }
	 iv_ruleRegister=ruleRegister 
	 { $current=$iv_ruleRegister.current; } 
	 EOF 
;

// Rule Register
ruleRegister returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_REG
		{
			newLeafNode(lv_name_0_0, grammarAccess.getRegisterAccess().getNameREGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegisterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"REG");
	    }

)
)
;





// Entry rule entryRuleOutcome
entryRuleOutcome returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutcomeRule()); }
	 iv_ruleOutcome=ruleOutcome 
	 { $current=$iv_ruleOutcome.current; } 
	 EOF 
;

// Rule Outcome
ruleOutcome returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='outcome:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutcomeAccess().getOutcomeKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getOutcomeAccess().getStateParserRuleCall_1()); 
    }
    this_State_1=ruleState
    { 
        $current = $this_State_1.current; 
        afterParserOrEnumRuleCall();
    }
(this_COMMENT_2=RULE_COMMENT
    { 
    newLeafNode(this_COMMENT_2, grammarAccess.getOutcomeAccess().getCOMMENTTerminalRuleCall_2()); 
    }
)?)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStateAccess().getImplicationParserRuleCall()); 
    }
    this_Implication_0=ruleImplication
    { 
        $current = $this_Implication_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleImplication
entryRuleImplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicationRule()); }
	 iv_ruleImplication=ruleImplication 
	 { $current=$iv_ruleImplication.current; } 
	 EOF 
;

// Rule Implication
ruleImplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); 
    }
    this_Disjunction_0=ruleDisjunction
    { 
        $current = $this_Disjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImplicationAccess().getBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=RULE_IMPLY
		{
			newLeafNode(lv_op_2_0, grammarAccess.getImplicationAccess().getOpIMPLYTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplicationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"IMPLY");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleImplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Implication");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDisjunction
entryRuleDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDisjunctionRule()); }
	 iv_ruleDisjunction=ruleDisjunction 
	 { $current=$iv_ruleDisjunction.current; } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); 
    }
    this_Conjunction_0=ruleConjunction
    { 
        $current = $this_Conjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDisjunctionAccess().getBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=RULE_OR
		{
			newLeafNode(lv_op_2_0, grammarAccess.getDisjunctionAccess().getOpORTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDisjunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleDisjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Disjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0()); 
    }
    this_Negation_0=ruleNegation
    { 
        $current = $this_Negation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConjunctionAccess().getBinaryLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=RULE_AND
		{
			newLeafNode(lv_op_2_0, grammarAccess.getConjunctionAccess().getOpANDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConjunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"AND");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NOT_0=RULE_NOT
    { 
    newLeafNode(this_NOT_0, grammarAccess.getNegationAccess().getNOTTerminalRuleCall_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1()); 
    }
    this_Negated_1=ruleNegated
    { 
        $current = $this_Negated_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getNegationAccess().getPrimaryParserRuleCall_1()); 
    }
    this_Primary_2=rulePrimary
    { 
        $current = $this_Primary_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNegated
entryRuleNegated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegatedRule()); }
	 iv_ruleNegated=ruleNegated 
	 { $current=$iv_ruleNegated.current; } 
	 EOF 
;

// Rule Negated
ruleNegated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegatedAccess().getNotAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegatedAccess().getNotPrimaryParserRuleCall_1_0()); 
	    }
		lv_not_1_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegatedRule());
	        }
       		set(
       			$current, 
       			"not",
        		lv_not_1_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getStateParserRuleCall_0_1()); 
    }
    this_State_1=ruleState
    { 
        $current = $this_State_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getRegStateParserRuleCall_1()); 
    }
    this_RegState_3=ruleRegState
    { 
        $current = $this_RegState_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRegState
entryRuleRegState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegStateRule()); }
	 iv_ruleRegState=ruleRegState 
	 { $current=$iv_ruleRegState.current; } 
	 EOF 
;

// Rule RegState
ruleRegState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegStateRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRegStateAccess().getRegisterRegisterCrossReference_0_0()); 
	    }
		ruleRQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRegStateAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getRegStateAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleRQN
entryRuleRQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRQNRule()); } 
	 iv_ruleRQN=ruleRQN 
	 { $current=$iv_ruleRQN.current.getText(); }  
	 EOF 
;

// Rule RQN
ruleRQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_PROC_0=RULE_PROC    {
		$current.merge(this_PROC_0);
    }

    { 
    newLeafNode(this_PROC_0, grammarAccess.getRQNAccess().getPROCTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRQNAccess().getFullStopKeyword_1()); 
    }
    this_REG_2=RULE_REG    {
		$current.merge(this_REG_2);
    }

    { 
    newLeafNode(this_REG_2, grammarAccess.getRQNAccess().getREGTerminalRuleCall_2()); 
    }
)
    ;





RULE_IMPLY : '=>';

RULE_OR : 'or';

RULE_AND : 'and';

RULE_NOT : 'not';

RULE_PROC : ('P'|'p') RULE_INT;

RULE_REG : ('R'|'r') RULE_INT;

RULE_ADDR : ('A'|'a') RULE_INT;

RULE_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


